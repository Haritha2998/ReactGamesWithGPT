{"ast":null,"code":"var _jsxFileName = \"/Users/haritha/Desktop/Job/Portfolio/my_portfolio/src/Hangman.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Hangman() {\n  _s();\n  const canvasRef = useRef(null);\n  const [animationFrame, setAnimationFrame] = useState(null);\n  const [word, setWord] = useState('');\n  const [selectedLetters, setSelectedLetters] = useState([]);\n  const alphabets = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n  // useEffect(() => {\n  //     const canvas = canvasRef.current;\n  //     const ctx = canvas.getContext('2d');\n  //     const radius = canvas.height / 8;\n  //     const lineWidth = 4;\n  //     const color = 'white';\n  //     const lineHeight = 50; // Adjusted to desired line length\n\n  //     let currentAngle = 0;\n  //     let currentHeight = 0;\n  //     let requestIdCircle = null;\n  //     let requestIdLine = null;\n\n  //     const drawCircle = () => {\n  //         ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear canvas for each frame\n  //         ctx.beginPath();\n  //         ctx.arc(canvas.width / 4, canvas.height / 4, radius, 0, currentAngle);\n  //         ctx.lineWidth = lineWidth;\n  //         ctx.strokeStyle = color;\n  //         ctx.stroke();\n\n  //         currentAngle += 0.1;\n  //         if (currentAngle > Math.PI * 2) {\n  //             cancelAnimationFrame(requestIdCircle);\n  //             requestIdCircle = null;\n  //             drawLine(); // Start drawing the line after circle animation\n  //         } else {\n  //             requestIdCircle = requestAnimationFrame(drawCircle);\n  //         }\n  //     };\n\n  //     const drawLine = () => {\n  //         ctx.beginPath();\n  //         ctx.moveTo(canvas.width / 4, canvas.height/4 + radius); // Start at circle's bottom\n  //         ctx.lineTo(canvas.width / 4, canvas.height/4 + radius + currentHeight);\n\n  //         ctx.lineWidth = lineWidth;\n  //         ctx.strokeStyle = color;\n  //         ctx.stroke();\n\n  //         currentHeight += 1;\n  //         if (currentHeight > lineHeight) {\n  //             cancelAnimationFrame(requestIdLine);\n  //             requestIdLine = null;\n  //             ctx.beginPath();\n  //             ctx.moveTo(canvas.width / 4, canvas.height/4 + 2*radius);\n  //             ctx.lineTo(canvas.width / 4 - 2*radius, canvas.width / 4 + radius);\n  //             ctx.stroke();\n  //             ctx.beginPath();\n  //             ctx.moveTo(canvas.width / 4, canvas.height/4 + 2*radius);\n  //             ctx.lineTo(canvas.width / 4 + 2*radius, canvas.width / 4 + radius);\n  //             ctx.stroke();\n  //             ctx.beginPath();\n  //             ctx.moveTo(canvas.width / 4, canvas.height/2 + radius);\n  //             ctx.lineTo(canvas.width / 4 + 2*radius, canvas.height/2 + 2*radius);\n  //             ctx.stroke();\n  //             ctx.beginPath();\n  //             ctx.moveTo(canvas.width / 4, canvas.height/2 + radius);\n  //             ctx.lineTo(canvas.width / 4 - 2*radius, canvas.height/2 + 2*radius);\n  //             ctx.stroke();\n  //             ctx.beginPath();\n  //             ctx.moveTo(canvas.width / 4 + 3*radius, canvas.height/4 - 3*radius);\n  //             ctx.lineTo(canvas.width / 4 + 3*radius, canvas.height/2 + 2*radius);\n  //             ctx.lineTo(canvas.width / 4 + 3*radius, canvas.height/4 - 3*radius);\n  //             ctx.lineTo(canvas.width / 4, canvas.height/4 - 3*radius);\n  //             ctx.lineTo(canvas.width / 4, canvas.height/4 - radius);\n  //             ctx.stroke();\n  //         } else {\n  //             requestIdLine = requestAnimationFrame(drawLine);\n  //         }\n  //     };\n\n  //     drawCircle();\n  // }, []);\n\n  //     const canvas = canvasRef.current;\n  //     const ctx = canvas.getContext('2d');\n\n  //     // Draw hangman here\n\n  //     const drawHangman = () => {\n  //       // Clear canvas\n  //       ctx.clearRect(0, 0, canvas.width, canvas.height);\n  //       ctx.strokeStyle = 'white';\n  //       ctx.lineWidth = 2;\n  //       // Draw hangman parts\n  //       // You'll need to implement this part based on the game state\n\n  //       // Example: Draw the gallows\n  //       ctx.beginPath();\n  //       ctx.moveTo(50, 350);\n  //       ctx.lineTo(200, 350);\n  //       ctx.lineTo(200, 50);\n  //       ctx.lineTo(150, 50);\n  //       ctx.lineTo(150, 100);\n  //       ctx.stroke();\n\n  //       // Example: Draw the head\n  //       ctx.beginPath();\n  //       ctx.arc(150, 125, 25, 0, Math.PI * 2);\n  //       ctx.stroke();\n\n  //       // Example: Draw the body\n  //       ctx.beginPath();\n  //       ctx.moveTo(150, 150);\n  //       ctx.lineTo(150, 250);\n  //       ctx.stroke();\n\n  //       // Example: Draw the arms\n  //       ctx.beginPath();\n  //       ctx.moveTo(150, 175);\n  //       ctx.lineTo(100, 200);\n  //       ctx.moveTo(150, 175);\n  //       ctx.lineTo(200, 200);\n  //       ctx.stroke();\n\n  //       // Example: Draw the legs\n  //       ctx.beginPath();\n  //       ctx.moveTo(150, 250);\n  //       ctx.lineTo(125, 300);\n  //       ctx.moveTo(150, 250);\n  //       ctx.lineTo(175, 300);\n  //       ctx.stroke();\n  //     };\n\n  //     // Start animation loop\n  //     const animate = () => {\n  //       drawHangman();\n  //       setAnimationFrame(requestAnimationFrame(animate));\n  //     };\n\n  //     animate();\n\n  //     return () => {\n  //       cancelAnimationFrame(animationFrame);\n  //     };\n  //   }, [animationFrame]);\n  renderAlphabets = (item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: () => {\n      if (!selectedArr.includes(item)) {\n        let selectedArr = selectedLetters;\n        selectedArr.push(item);\n        setSelectedLetters(selectedArr);\n      }\n    },\n    style: sele,\n    children: \"item\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 40\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"viewContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"headerContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"header\",\n        children: \"Hangman\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: alphabets.map((item, index) => renderAlphabets(item, index))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 9\n  }, this);\n}\n_s(Hangman, \"p9vu7O9EkY9Ky7yzu7wOpl5xXGA=\");\n_c = Hangman;\nvar _c;\n$RefreshReg$(_c, \"Hangman\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","Hangman","_s","canvasRef","animationFrame","setAnimationFrame","word","setWord","selectedLetters","setSelectedLetters","alphabets","renderAlphabets","item","index","onClick","selectedArr","includes","push","style","sele","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","_c","$RefreshReg$"],"sources":["/Users/haritha/Desktop/Job/Portfolio/my_portfolio/src/Hangman.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nexport default function Hangman() {\n    const canvasRef = useRef(null);\n    const [animationFrame, setAnimationFrame] = useState(null);\n    const [word, setWord] = useState('');\n    const [selectedLetters, setSelectedLetters] = useState([]);\n    const alphabets = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n    // useEffect(() => {\n    //     const canvas = canvasRef.current;\n    //     const ctx = canvas.getContext('2d');\n    //     const radius = canvas.height / 8;\n    //     const lineWidth = 4;\n    //     const color = 'white';\n    //     const lineHeight = 50; // Adjusted to desired line length\n\n    //     let currentAngle = 0;\n    //     let currentHeight = 0;\n    //     let requestIdCircle = null;\n    //     let requestIdLine = null;\n\n    //     const drawCircle = () => {\n    //         ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear canvas for each frame\n    //         ctx.beginPath();\n    //         ctx.arc(canvas.width / 4, canvas.height / 4, radius, 0, currentAngle);\n    //         ctx.lineWidth = lineWidth;\n    //         ctx.strokeStyle = color;\n    //         ctx.stroke();\n\n    //         currentAngle += 0.1;\n    //         if (currentAngle > Math.PI * 2) {\n    //             cancelAnimationFrame(requestIdCircle);\n    //             requestIdCircle = null;\n    //             drawLine(); // Start drawing the line after circle animation\n    //         } else {\n    //             requestIdCircle = requestAnimationFrame(drawCircle);\n    //         }\n    //     };\n\n    //     const drawLine = () => {\n    //         ctx.beginPath();\n    //         ctx.moveTo(canvas.width / 4, canvas.height/4 + radius); // Start at circle's bottom\n    //         ctx.lineTo(canvas.width / 4, canvas.height/4 + radius + currentHeight);\n\n\n    //         ctx.lineWidth = lineWidth;\n    //         ctx.strokeStyle = color;\n    //         ctx.stroke();\n\n    //         currentHeight += 1;\n    //         if (currentHeight > lineHeight) {\n    //             cancelAnimationFrame(requestIdLine);\n    //             requestIdLine = null;\n    //             ctx.beginPath();\n    //             ctx.moveTo(canvas.width / 4, canvas.height/4 + 2*radius);\n    //             ctx.lineTo(canvas.width / 4 - 2*radius, canvas.width / 4 + radius);\n    //             ctx.stroke();\n    //             ctx.beginPath();\n    //             ctx.moveTo(canvas.width / 4, canvas.height/4 + 2*radius);\n    //             ctx.lineTo(canvas.width / 4 + 2*radius, canvas.width / 4 + radius);\n    //             ctx.stroke();\n    //             ctx.beginPath();\n    //             ctx.moveTo(canvas.width / 4, canvas.height/2 + radius);\n    //             ctx.lineTo(canvas.width / 4 + 2*radius, canvas.height/2 + 2*radius);\n    //             ctx.stroke();\n    //             ctx.beginPath();\n    //             ctx.moveTo(canvas.width / 4, canvas.height/2 + radius);\n    //             ctx.lineTo(canvas.width / 4 - 2*radius, canvas.height/2 + 2*radius);\n    //             ctx.stroke();\n    //             ctx.beginPath();\n    //             ctx.moveTo(canvas.width / 4 + 3*radius, canvas.height/4 - 3*radius);\n    //             ctx.lineTo(canvas.width / 4 + 3*radius, canvas.height/2 + 2*radius);\n    //             ctx.lineTo(canvas.width / 4 + 3*radius, canvas.height/4 - 3*radius);\n    //             ctx.lineTo(canvas.width / 4, canvas.height/4 - 3*radius);\n    //             ctx.lineTo(canvas.width / 4, canvas.height/4 - radius);\n    //             ctx.stroke();\n    //         } else {\n    //             requestIdLine = requestAnimationFrame(drawLine);\n    //         }\n    //     };\n\n    //     drawCircle();\n    // }, []);\n\n    //     const canvas = canvasRef.current;\n    //     const ctx = canvas.getContext('2d');\n      \n    //     // Draw hangman here\n      \n    //     const drawHangman = () => {\n    //       // Clear canvas\n    //       ctx.clearRect(0, 0, canvas.width, canvas.height);\n    //       ctx.strokeStyle = 'white';\n    //       ctx.lineWidth = 2;\n    //       // Draw hangman parts\n    //       // You'll need to implement this part based on the game state\n      \n    //       // Example: Draw the gallows\n    //       ctx.beginPath();\n    //       ctx.moveTo(50, 350);\n    //       ctx.lineTo(200, 350);\n    //       ctx.lineTo(200, 50);\n    //       ctx.lineTo(150, 50);\n    //       ctx.lineTo(150, 100);\n    //       ctx.stroke();\n      \n    //       // Example: Draw the head\n    //       ctx.beginPath();\n    //       ctx.arc(150, 125, 25, 0, Math.PI * 2);\n    //       ctx.stroke();\n      \n    //       // Example: Draw the body\n    //       ctx.beginPath();\n    //       ctx.moveTo(150, 150);\n    //       ctx.lineTo(150, 250);\n    //       ctx.stroke();\n      \n    //       // Example: Draw the arms\n    //       ctx.beginPath();\n    //       ctx.moveTo(150, 175);\n    //       ctx.lineTo(100, 200);\n    //       ctx.moveTo(150, 175);\n    //       ctx.lineTo(200, 200);\n    //       ctx.stroke();\n      \n    //       // Example: Draw the legs\n    //       ctx.beginPath();\n    //       ctx.moveTo(150, 250);\n    //       ctx.lineTo(125, 300);\n    //       ctx.moveTo(150, 250);\n    //       ctx.lineTo(175, 300);\n    //       ctx.stroke();\n    //     };\n      \n    //     // Start animation loop\n    //     const animate = () => {\n    //       drawHangman();\n    //       setAnimationFrame(requestAnimationFrame(animate));\n    //     };\n      \n    //     animate();\n      \n    //     return () => {\n    //       cancelAnimationFrame(animationFrame);\n    //     };\n    //   }, [animationFrame]);\n    renderAlphabets = (item, index) => <div onClick = {() => {\n        if (!selectedArr.includes(item)) {\n            let selectedArr = selectedLetters;\n            selectedArr.push(item);\n            setSelectedLetters(selectedArr);\n        }\n        \n    }} style={sele} >\n        item\n    </div>\n    return (\n        <div className='viewContainer'>\n            <div className='headerContainer' >\n\n                <h2 className='header'>Hangman</h2>\n            </div>\n            {/* <canvas ref={canvasRef} width={200} height={200}/>; */}\n            <div>\n                {alphabets.map((item, index) => renderAlphabets(item, index))}\n            </div>\n\n        </div>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}