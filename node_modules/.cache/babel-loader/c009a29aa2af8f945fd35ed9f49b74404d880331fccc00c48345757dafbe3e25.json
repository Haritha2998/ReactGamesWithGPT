{"ast":null,"code":"var _jsxFileName = \"/Users/haritha/Desktop/Job/Portfolio/my_portfolio/src/Hangman.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Hangman() {\n  _s();\n  const canvasRef = useRef(null);\n\n  // useEffect(() => {\n  //     const canvas = canvasRef.current;\n  //     const ctx = canvas.getContext('2d');\n  //     const radius = canvas.height / 4;\n  //     const lineWidth = 2;\n  //     const color = 'white';\n  //     const lineHeight = 25; // Adjusted to desired line length\n\n  //     let currentAngle = 0;\n  //     let currentHeight = 0;\n  //     let requestIdCircle = null;\n  //     let requestIdLine = null;\n\n  //     const drawCircle = () => {\n  //         ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear canvas for each frame\n  //         ctx.beginPath();\n  //         ctx.arc(canvas.width / 2, canvas.height / 2, radius, 0, currentAngle);\n  //         ctx.lineWidth = lineWidth;\n  //         ctx.strokeStyle = color;\n  //         ctx.stroke();\n\n  //         currentAngle += 0.1;\n  //         if (currentAngle > Math.PI * 2) {\n  //             cancelAnimationFrame(requestIdCircle);\n  //             requestIdCircle = null;\n  //             drawLine(); // Start drawing the line after circle animation\n  //         } else {\n  //             requestIdCircle = requestAnimationFrame(drawCircle);\n  //         }\n  //     };\n\n  //     const drawLine = () => {\n  //         ctx.beginPath();\n  //         ctx.moveTo(canvas.width / 2, canvas.height); // Start at circle's bottom\n  //         ctx.lineTo(canvas.width / 2, canvas.height - currentHeight); // Adjust for radius\n  //         ctx.moveTo(canvas.width / 2, canvas.height - currentHeight - radius / 2); // Start at waist\n  //         ctx.lineTo(canvas.width / 2 - radius - 100, canvas.height - currentHeight - radius * 2); // Left hand\n  //         ctx.moveTo(canvas.width / 2, canvas.height - currentHeight - radius / 2); // Start at waist again\n  //         ctx.lineTo(canvas.width / 2 + radius + 100, canvas.height - currentHeight - radius * 2); // Right hand\n\n  //         // Legs\n  //         ctx.moveTo(canvas.width / 2, canvas.height - currentHeight); // Start at feet\n  //         ctx.lineTo(canvas.width / 2 - radius / 2, canvas.height - currentHeight - radius); // Left leg\n  //         ctx.moveTo(canvas.width / 2, canvas.height - currentHeight); // Start at feet again\n  //         ctx.lineTo(canvas.width / 2 + radius / 2, canvas.height - currentHeight - radius);\n\n  //         ctx.lineWidth = 1;\n  //         ctx.strokeStyle = color;\n  //         ctx.stroke();\n\n  //         currentHeight += 2;\n  //         if (currentHeight > lineHeight) {\n  //             cancelAnimationFrame(requestIdLine);\n  //             requestIdLine = null;\n  //         } else {\n  //             requestIdLine = requestAnimationFrame(drawLine);\n  //         }\n  //     };\n\n  //     drawCircle(); // Start with the circle animation\n  // }, []);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const radius = canvas.height / 4;\n    const lineWidth = 2;\n    const color = 'white';\n    const lineHeight = canvas.height - radius * 2; // Extend lines to bottom of canvas\n\n    let currentHeight = 0;\n    let requestId = null;\n    const drawFrame = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear canvas for each frame\n\n      // Draw the circle\n      ctx.beginPath();\n      ctx.arc(canvas.width / 2, canvas.height / 2, radius, 0, 2 * Math.PI);\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = color;\n      ctx.stroke();\n\n      // Draw the body line\n      ctx.beginPath();\n      ctx.moveTo(canvas.width / 2, canvas.height / 2 + radius); // Start at bottom of head\n      ctx.lineTo(canvas.width / 2, canvas.height - currentHeight);\n      ctx.stroke();\n\n      // Draw the hands\n      ctx.beginPath();\n      ctx.moveTo(canvas.width / 2, canvas.height - currentHeight - radius / 2); // Start at waist\n      ctx.lineTo(canvas.width / 2 - radius, canvas.height - currentHeight - radius * 2); // Left hand\n      ctx.moveTo(canvas.width / 2, canvas.height - currentHeight - radius / 2); // Start at waist again\n      ctx.lineTo(canvas.width / 2 + radius, canvas.height - currentHeight - radius * 2); // Right hand\n      ctx.stroke();\n\n      // Draw the legs\n      ctx.beginPath();\n      ctx.moveTo(canvas.width / 2, canvas.height - currentHeight); // Start at feet\n      ctx.lineTo(canvas.width / 2 - radius / 2, canvas.height - currentHeight + radius); // Left leg\n      ctx.moveTo(canvas.width / 2, canvas.height - currentHeight); // Start at feet again\n      ctx.lineTo(canvas.width / 2 + radius / 2, canvas.height - currentHeight + radius); // Right leg\n      ctx.stroke();\n      currentHeight += 2;\n      if (currentHeight > lineHeight) {\n        cancelAnimationFrame(requestId);\n        requestId = null;\n      } else {\n        requestId = requestAnimationFrame(drawFrame);\n      }\n    };\n    drawFrame(); // Start the animation\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"viewContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"headerContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        width: 100,\n        height: 100\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), \";\", /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"header\",\n        children: \"Hangman\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"header\",\n      children: \"Hangman\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"header\",\n      children: \"Hangman\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"header\",\n      children: \"Hangman\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"header\",\n      children: \"Hangman\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 9\n  }, this);\n}\n_s(Hangman, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = Hangman;\nvar _c;\n$RefreshReg$(_c, \"Hangman\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","Hangman","_s","canvasRef","canvas","current","ctx","getContext","radius","height","lineWidth","color","lineHeight","currentHeight","requestId","drawFrame","clearRect","width","beginPath","arc","Math","PI","strokeStyle","stroke","moveTo","lineTo","cancelAnimationFrame","requestAnimationFrame","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/haritha/Desktop/Job/Portfolio/my_portfolio/src/Hangman.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nexport default function Hangman() {\n    const canvasRef = useRef(null);\n\n    // useEffect(() => {\n    //     const canvas = canvasRef.current;\n    //     const ctx = canvas.getContext('2d');\n    //     const radius = canvas.height / 4;\n    //     const lineWidth = 2;\n    //     const color = 'white';\n    //     const lineHeight = 25; // Adjusted to desired line length\n\n    //     let currentAngle = 0;\n    //     let currentHeight = 0;\n    //     let requestIdCircle = null;\n    //     let requestIdLine = null;\n\n    //     const drawCircle = () => {\n    //         ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear canvas for each frame\n    //         ctx.beginPath();\n    //         ctx.arc(canvas.width / 2, canvas.height / 2, radius, 0, currentAngle);\n    //         ctx.lineWidth = lineWidth;\n    //         ctx.strokeStyle = color;\n    //         ctx.stroke();\n\n    //         currentAngle += 0.1;\n    //         if (currentAngle > Math.PI * 2) {\n    //             cancelAnimationFrame(requestIdCircle);\n    //             requestIdCircle = null;\n    //             drawLine(); // Start drawing the line after circle animation\n    //         } else {\n    //             requestIdCircle = requestAnimationFrame(drawCircle);\n    //         }\n    //     };\n\n    //     const drawLine = () => {\n    //         ctx.beginPath();\n    //         ctx.moveTo(canvas.width / 2, canvas.height); // Start at circle's bottom\n    //         ctx.lineTo(canvas.width / 2, canvas.height - currentHeight); // Adjust for radius\n    //         ctx.moveTo(canvas.width / 2, canvas.height - currentHeight - radius / 2); // Start at waist\n    //         ctx.lineTo(canvas.width / 2 - radius - 100, canvas.height - currentHeight - radius * 2); // Left hand\n    //         ctx.moveTo(canvas.width / 2, canvas.height - currentHeight - radius / 2); // Start at waist again\n    //         ctx.lineTo(canvas.width / 2 + radius + 100, canvas.height - currentHeight - radius * 2); // Right hand\n\n    //         // Legs\n    //         ctx.moveTo(canvas.width / 2, canvas.height - currentHeight); // Start at feet\n    //         ctx.lineTo(canvas.width / 2 - radius / 2, canvas.height - currentHeight - radius); // Left leg\n    //         ctx.moveTo(canvas.width / 2, canvas.height - currentHeight); // Start at feet again\n    //         ctx.lineTo(canvas.width / 2 + radius / 2, canvas.height - currentHeight - radius);\n\n\n    //         ctx.lineWidth = 1;\n    //         ctx.strokeStyle = color;\n    //         ctx.stroke();\n\n    //         currentHeight += 2;\n    //         if (currentHeight > lineHeight) {\n    //             cancelAnimationFrame(requestIdLine);\n    //             requestIdLine = null;\n    //         } else {\n    //             requestIdLine = requestAnimationFrame(drawLine);\n    //         }\n    //     };\n\n    //     drawCircle(); // Start with the circle animation\n    // }, []);\n\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        const radius = canvas.height / 4;\n        const lineWidth = 2;\n        const color = 'white';\n        const lineHeight = canvas.height - radius * 2; // Extend lines to bottom of canvas\n    \n        let currentHeight = 0;\n        let requestId = null;\n    \n        const drawFrame = () => {\n          ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear canvas for each frame\n    \n          // Draw the circle\n          ctx.beginPath();\n          ctx.arc(canvas.width / 2, canvas.height / 2, radius, 0, 2 * Math.PI);\n          ctx.lineWidth = lineWidth;\n          ctx.strokeStyle = color;\n          ctx.stroke();\n    \n          // Draw the body line\n          ctx.beginPath();\n          ctx.moveTo(canvas.width / 2, canvas.height / 2 + radius); // Start at bottom of head\n          ctx.lineTo(canvas.width / 2, canvas.height - currentHeight);\n          ctx.stroke();\n    \n          // Draw the hands\n          ctx.beginPath();\n          ctx.moveTo(canvas.width / 2, canvas.height - currentHeight - radius / 2); // Start at waist\n          ctx.lineTo(canvas.width / 2 - radius, canvas.height - currentHeight - radius * 2); // Left hand\n          ctx.moveTo(canvas.width / 2, canvas.height - currentHeight - radius / 2); // Start at waist again\n          ctx.lineTo(canvas.width / 2 + radius, canvas.height - currentHeight - radius * 2); // Right hand\n          ctx.stroke();\n    \n          // Draw the legs\n          ctx.beginPath();\n          ctx.moveTo(canvas.width / 2, canvas.height - currentHeight); // Start at feet\n          ctx.lineTo(canvas.width / 2 - radius / 2, canvas.height - currentHeight + radius); // Left leg\n          ctx.moveTo(canvas.width / 2, canvas.height - currentHeight); // Start at feet again\n          ctx.lineTo(canvas.width / 2 + radius / 2, canvas.height - currentHeight + radius); // Right leg\n          ctx.stroke();\n    \n          currentHeight += 2;\n          if (currentHeight > lineHeight) {\n            cancelAnimationFrame(requestId);\n            requestId = null;\n          } else {\n            requestId = requestAnimationFrame(drawFrame);\n          }\n        };\n    \n        drawFrame(); // Start the animation\n      }, []);\n\n    return (\n        <div className='viewContainer'>\n            <div className='headerContainer' >\n                <canvas ref={canvasRef} width={100} height={100} />;\n                <h2 className='header'>Hangman</h2>\n\n            </div>\n            <h2 className='header'>Hangman</h2>\n            <h2 className='header'>Hangman</h2>\n            <h2 className='header'>Hangman</h2>\n            <h2 className='header'>Hangman</h2>\n        </div>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}