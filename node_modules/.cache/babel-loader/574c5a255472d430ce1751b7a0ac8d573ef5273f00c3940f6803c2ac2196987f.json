{"ast":null,"code":"var _jsxFileName = \"/Users/haritha/Desktop/Job/Portfolio/my_portfolio/src/Hangman.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Hangman() {\n  _s();\n  const canvasRef = useRef(null);\n  const [animationFrame, setAnimationFrame] = useState(null);\n  // useEffect(() => {\n  //     const canvas = canvasRef.current;\n  //     const ctx = canvas.getContext('2d');\n  //     const radius = canvas.height / 4;\n  //     const lineWidth = 2;\n  //     const color = 'white';\n  //     const lineHeight = 25; // Adjusted to desired line length\n\n  //     let currentAngle = 0;\n  //     let currentHeight = 0;\n  //     let requestIdCircle = null;\n  //     let requestIdLine = null;\n\n  //     const drawCircle = () => {\n  //         ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear canvas for each frame\n  //         ctx.beginPath();\n  //         ctx.arc(canvas.width / 2, canvas.height / 2, radius, 0, currentAngle);\n  //         ctx.lineWidth = lineWidth;\n  //         ctx.strokeStyle = color;\n  //         ctx.stroke();\n\n  //         currentAngle += 0.1;\n  //         if (currentAngle > Math.PI * 2) {\n  //             cancelAnimationFrame(requestIdCircle);\n  //             requestIdCircle = null;\n  //             drawLine(); // Start drawing the line after circle animation\n  //         } else {\n  //             requestIdCircle = requestAnimationFrame(drawCircle);\n  //         }\n  //     };\n\n  //     const drawLine = () => {\n  //         ctx.beginPath();\n  //         ctx.moveTo(canvas.width / 2, canvas.height); // Start at circle's bottom\n  //         ctx.lineTo(canvas.width / 2, canvas.height - currentHeight); // Adjust for radius\n  //         ctx.moveTo(canvas.width / 2, canvas.height - currentHeight - radius / 2); // Start at waist\n  //         ctx.lineTo(canvas.width / 2 - radius - 100, canvas.height - currentHeight - radius * 2); // Left hand\n  //         ctx.moveTo(canvas.width / 2, canvas.height - currentHeight - radius / 2); // Start at waist again\n  //         ctx.lineTo(canvas.width / 2 + radius + 100, canvas.height - currentHeight - radius * 2); // Right hand\n\n  //         // Legs\n  //         ctx.moveTo(canvas.width / 2, canvas.height - currentHeight); // Start at feet\n  //         ctx.lineTo(canvas.width / 2 - radius / 2, canvas.height - currentHeight - radius); // Left leg\n  //         ctx.moveTo(canvas.width / 2, canvas.height - currentHeight); // Start at feet again\n  //         ctx.lineTo(canvas.width / 2 + radius / 2, canvas.height - currentHeight - radius);\n\n  //         ctx.lineWidth = 1;\n  //         ctx.strokeStyle = color;\n  //         ctx.stroke();\n\n  //         currentHeight += 2;\n  //         if (currentHeight > lineHeight) {\n  //             cancelAnimationFrame(requestIdLine);\n  //             requestIdLine = null;\n  //         } else {\n  //             requestIdLine = requestAnimationFrame(drawLine);\n  //         }\n  //     };\n\n  //     drawCircle(); // Start with the circle animation\n  // }, []);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Draw hangman here\n\n    const drawHangman = () => {\n      // Clear canvas\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.strokeStyle = 'white';\n      ctx.str;\n      // Draw hangman parts\n      // You'll need to implement this part based on the game state\n\n      // Example: Draw the gallows\n      ctx.beginPath();\n      ctx.moveTo(50, 350);\n      ctx.lineTo(200, 350);\n      ctx.lineTo(200, 50);\n      ctx.lineTo(150, 50);\n      ctx.lineTo(150, 100);\n      ctx.stroke();\n\n      // Example: Draw the head\n      ctx.beginPath();\n      ctx.arc(150, 125, 25, 0, Math.PI * 2);\n      ctx.stroke();\n\n      // Example: Draw the body\n      ctx.beginPath();\n      ctx.moveTo(150, 150);\n      ctx.lineTo(150, 250);\n      ctx.stroke();\n\n      // Example: Draw the arms\n      ctx.beginPath();\n      ctx.moveTo(150, 175);\n      ctx.lineTo(100, 200);\n      ctx.moveTo(150, 175);\n      ctx.lineTo(200, 200);\n      ctx.stroke();\n\n      // Example: Draw the legs\n      ctx.beginPath();\n      ctx.moveTo(150, 250);\n      ctx.lineTo(125, 300);\n      ctx.moveTo(150, 250);\n      ctx.lineTo(175, 300);\n      ctx.stroke();\n    };\n\n    // Start animation loop\n    const animate = () => {\n      drawHangman();\n      setAnimationFrame(requestAnimationFrame(animate));\n    };\n    animate();\n    return () => {\n      cancelAnimationFrame(animationFrame);\n    };\n  }, [animationFrame]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"viewContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"headerContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        width: 100,\n        height: 100\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this), \";\", /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"header\",\n        children: \"Hangman\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"header\",\n      children: \"Hangman\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"header\",\n      children: \"Hangman\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"header\",\n      children: \"Hangman\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"header\",\n      children: \"Hangman\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 9\n  }, this);\n}\n_s(Hangman, \"JCjeffYr247CM9PIYRFmQ2z5d00=\");\n_c = Hangman;\nvar _c;\n$RefreshReg$(_c, \"Hangman\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","Hangman","_s","canvasRef","animationFrame","setAnimationFrame","canvas","current","ctx","getContext","drawHangman","clearRect","width","height","strokeStyle","str","beginPath","moveTo","lineTo","stroke","arc","Math","PI","animate","requestAnimationFrame","cancelAnimationFrame","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/haritha/Desktop/Job/Portfolio/my_portfolio/src/Hangman.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nexport default function Hangman() {\n    const canvasRef = useRef(null);\n    const [animationFrame, setAnimationFrame] = useState(null);\n    // useEffect(() => {\n    //     const canvas = canvasRef.current;\n    //     const ctx = canvas.getContext('2d');\n    //     const radius = canvas.height / 4;\n    //     const lineWidth = 2;\n    //     const color = 'white';\n    //     const lineHeight = 25; // Adjusted to desired line length\n\n    //     let currentAngle = 0;\n    //     let currentHeight = 0;\n    //     let requestIdCircle = null;\n    //     let requestIdLine = null;\n\n    //     const drawCircle = () => {\n    //         ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear canvas for each frame\n    //         ctx.beginPath();\n    //         ctx.arc(canvas.width / 2, canvas.height / 2, radius, 0, currentAngle);\n    //         ctx.lineWidth = lineWidth;\n    //         ctx.strokeStyle = color;\n    //         ctx.stroke();\n\n    //         currentAngle += 0.1;\n    //         if (currentAngle > Math.PI * 2) {\n    //             cancelAnimationFrame(requestIdCircle);\n    //             requestIdCircle = null;\n    //             drawLine(); // Start drawing the line after circle animation\n    //         } else {\n    //             requestIdCircle = requestAnimationFrame(drawCircle);\n    //         }\n    //     };\n\n    //     const drawLine = () => {\n    //         ctx.beginPath();\n    //         ctx.moveTo(canvas.width / 2, canvas.height); // Start at circle's bottom\n    //         ctx.lineTo(canvas.width / 2, canvas.height - currentHeight); // Adjust for radius\n    //         ctx.moveTo(canvas.width / 2, canvas.height - currentHeight - radius / 2); // Start at waist\n    //         ctx.lineTo(canvas.width / 2 - radius - 100, canvas.height - currentHeight - radius * 2); // Left hand\n    //         ctx.moveTo(canvas.width / 2, canvas.height - currentHeight - radius / 2); // Start at waist again\n    //         ctx.lineTo(canvas.width / 2 + radius + 100, canvas.height - currentHeight - radius * 2); // Right hand\n\n    //         // Legs\n    //         ctx.moveTo(canvas.width / 2, canvas.height - currentHeight); // Start at feet\n    //         ctx.lineTo(canvas.width / 2 - radius / 2, canvas.height - currentHeight - radius); // Left leg\n    //         ctx.moveTo(canvas.width / 2, canvas.height - currentHeight); // Start at feet again\n    //         ctx.lineTo(canvas.width / 2 + radius / 2, canvas.height - currentHeight - radius);\n\n\n    //         ctx.lineWidth = 1;\n    //         ctx.strokeStyle = color;\n    //         ctx.stroke();\n\n    //         currentHeight += 2;\n    //         if (currentHeight > lineHeight) {\n    //             cancelAnimationFrame(requestIdLine);\n    //             requestIdLine = null;\n    //         } else {\n    //             requestIdLine = requestAnimationFrame(drawLine);\n    //         }\n    //     };\n\n    //     drawCircle(); // Start with the circle animation\n    // }, []);\n\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n      \n        // Draw hangman here\n      \n        const drawHangman = () => {\n          // Clear canvas\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          ctx.strokeStyle = 'white';\n          ctx.str\n          // Draw hangman parts\n          // You'll need to implement this part based on the game state\n      \n          // Example: Draw the gallows\n          ctx.beginPath();\n          ctx.moveTo(50, 350);\n          ctx.lineTo(200, 350);\n          ctx.lineTo(200, 50);\n          ctx.lineTo(150, 50);\n          ctx.lineTo(150, 100);\n          ctx.stroke();\n      \n          // Example: Draw the head\n          ctx.beginPath();\n          ctx.arc(150, 125, 25, 0, Math.PI * 2);\n          ctx.stroke();\n      \n          // Example: Draw the body\n          ctx.beginPath();\n          ctx.moveTo(150, 150);\n          ctx.lineTo(150, 250);\n          ctx.stroke();\n      \n          // Example: Draw the arms\n          ctx.beginPath();\n          ctx.moveTo(150, 175);\n          ctx.lineTo(100, 200);\n          ctx.moveTo(150, 175);\n          ctx.lineTo(200, 200);\n          ctx.stroke();\n      \n          // Example: Draw the legs\n          ctx.beginPath();\n          ctx.moveTo(150, 250);\n          ctx.lineTo(125, 300);\n          ctx.moveTo(150, 250);\n          ctx.lineTo(175, 300);\n          ctx.stroke();\n        };\n      \n        // Start animation loop\n        const animate = () => {\n          drawHangman();\n          setAnimationFrame(requestAnimationFrame(animate));\n        };\n      \n        animate();\n      \n        return () => {\n          cancelAnimationFrame(animationFrame);\n        };\n      }, [animationFrame]);\n\n    return (\n        <div className='viewContainer'>\n            <div className='headerContainer' >\n                <canvas ref={canvasRef} width={100} height={100} />;\n                <h2 className='header'>Hangman</h2>\n\n            </div>\n            <h2 className='header'>Hangman</h2>\n            <h2 className='header'>Hangman</h2>\n            <h2 className='header'>Hangman</h2>\n            <h2 className='header'>Hangman</h2>\n        </div>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}